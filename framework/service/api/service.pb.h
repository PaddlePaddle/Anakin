// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_service_2eproto__INCLUDED
#define PROTOBUF_service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace anakin {
namespace rpc {
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DeviceStatus;
class DeviceStatusDefaultTypeInternal;
extern DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
class ExecutionInfo;
class ExecutionInfoDefaultTypeInternal;
extern ExecutionInfoDefaultTypeInternal _ExecutionInfo_default_instance_;
class IO;
class IODefaultTypeInternal;
extern IODefaultTypeInternal _IO_default_instance_;
class RPCRequest;
class RPCRequestDefaultTypeInternal;
extern RPCRequestDefaultTypeInternal _RPCRequest_default_instance_;
class RPCResponse;
class RPCResponseDefaultTypeInternal;
extern RPCResponseDefaultTypeInternal _RPCResponse_default_instance_;
}  // namespace rpc
}  // namespace anakin

namespace anakin {
namespace rpc {

namespace protobuf_service_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_service_2eproto

// ===================================================================

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anakin.rpc.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const PROTOBUF_FINAL { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // repeated float data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:anakin.rpc.Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anakin.rpc.IO) */ {
 public:
  IO();
  virtual ~IO();

  IO(const IO& from);

  inline IO& operator=(const IO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IO(IO&& from) noexcept
    : IO() {
    *this = ::std::move(from);
  }

  inline IO& operator=(IO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IO& default_instance();

  static inline const IO* internal_default_instance() {
    return reinterpret_cast<const IO*>(
               &_IO_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IO* other);
  friend void swap(IO& a, IO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IO* New() const PROTOBUF_FINAL { return New(NULL); }

  IO* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IO& from);
  void MergeFrom(const IO& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .anakin.rpc.Data tensor = 1;
  bool has_tensor() const;
  void clear_tensor();
  static const int kTensorFieldNumber = 1;
  const ::anakin::rpc::Data& tensor() const;
  ::anakin::rpc::Data* mutable_tensor();
  ::anakin::rpc::Data* release_tensor();
  void set_allocated_tensor(::anakin::rpc::Data* tensor);

  // @@protoc_insertion_point(class_scope:anakin.rpc.IO)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::anakin::rpc::Data* tensor_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anakin.rpc.RPCRequest) */ {
 public:
  RPCRequest();
  virtual ~RPCRequest();

  RPCRequest(const RPCRequest& from);

  inline RPCRequest& operator=(const RPCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCRequest(RPCRequest&& from) noexcept
    : RPCRequest() {
    *this = ::std::move(from);
  }

  inline RPCRequest& operator=(RPCRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCRequest& default_instance();

  static inline const RPCRequest* internal_default_instance() {
    return reinterpret_cast<const RPCRequest*>(
               &_RPCRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RPCRequest* other);
  friend void swap(RPCRequest& a, RPCRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCRequest& from);
  void MergeFrom(const RPCRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .anakin.rpc.IO inputs = 2;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 2;
  const ::anakin::rpc::IO& inputs(int index) const;
  ::anakin::rpc::IO* mutable_inputs(int index);
  ::anakin::rpc::IO* add_inputs();
  ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >*
      mutable_inputs();
  const ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >&
      inputs() const;

  // bytes model = 1;
  void clear_model();
  static const int kModelFieldNumber = 1;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const void* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // int64 request_id = 3;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:anakin.rpc.RPCRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO > inputs_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::int64 request_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anakin.rpc.DeviceStatus) */ {
 public:
  DeviceStatus();
  virtual ~DeviceStatus();

  DeviceStatus(const DeviceStatus& from);

  inline DeviceStatus& operator=(const DeviceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceStatus(DeviceStatus&& from) noexcept
    : DeviceStatus() {
    *this = ::std::move(from);
  }

  inline DeviceStatus& operator=(DeviceStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceStatus& default_instance();

  static inline const DeviceStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceStatus*>(
               &_DeviceStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DeviceStatus* other);
  friend void swap(DeviceStatus& a, DeviceStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceStatus& from);
  void MergeFrom(const DeviceStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 temp = 3;
  void clear_temp();
  static const int kTempFieldNumber = 3;
  ::google::protobuf::int32 temp() const;
  void set_temp(::google::protobuf::int32 value);

  // int32 mem_free = 4;
  void clear_mem_free();
  static const int kMemFreeFieldNumber = 4;
  ::google::protobuf::int32 mem_free() const;
  void set_mem_free(::google::protobuf::int32 value);

  // int32 mem_used = 5;
  void clear_mem_used();
  static const int kMemUsedFieldNumber = 5;
  ::google::protobuf::int32 mem_used() const;
  void set_mem_used(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:anakin.rpc.DeviceStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 temp_;
  ::google::protobuf::int32 mem_free_;
  ::google::protobuf::int32 mem_used_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExecutionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anakin.rpc.ExecutionInfo) */ {
 public:
  ExecutionInfo();
  virtual ~ExecutionInfo();

  ExecutionInfo(const ExecutionInfo& from);

  inline ExecutionInfo& operator=(const ExecutionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionInfo(ExecutionInfo&& from) noexcept
    : ExecutionInfo() {
    *this = ::std::move(from);
  }

  inline ExecutionInfo& operator=(ExecutionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionInfo& default_instance();

  static inline const ExecutionInfo* internal_default_instance() {
    return reinterpret_cast<const ExecutionInfo*>(
               &_ExecutionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ExecutionInfo* other);
  friend void swap(ExecutionInfo& a, ExecutionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionInfo& from);
  void MergeFrom(const ExecutionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .anakin.rpc.DeviceStatus device_status = 3;
  bool has_device_status() const;
  void clear_device_status();
  static const int kDeviceStatusFieldNumber = 3;
  const ::anakin::rpc::DeviceStatus& device_status() const;
  ::anakin::rpc::DeviceStatus* mutable_device_status();
  ::anakin::rpc::DeviceStatus* release_device_status();
  void set_allocated_device_status(::anakin::rpc::DeviceStatus* device_status);

  // int32 duration_in_nano_seconds = 2;
  void clear_duration_in_nano_seconds();
  static const int kDurationInNanoSecondsFieldNumber = 2;
  ::google::protobuf::int32 duration_in_nano_seconds() const;
  void set_duration_in_nano_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:anakin.rpc.ExecutionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::anakin::rpc::DeviceStatus* device_status_;
  ::google::protobuf::int32 duration_in_nano_seconds_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPCResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anakin.rpc.RPCResponse) */ {
 public:
  RPCResponse();
  virtual ~RPCResponse();

  RPCResponse(const RPCResponse& from);

  inline RPCResponse& operator=(const RPCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCResponse(RPCResponse&& from) noexcept
    : RPCResponse() {
    *this = ::std::move(from);
  }

  inline RPCResponse& operator=(RPCResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCResponse& default_instance();

  static inline const RPCResponse* internal_default_instance() {
    return reinterpret_cast<const RPCResponse*>(
               &_RPCResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RPCResponse* other);
  friend void swap(RPCResponse& a, RPCResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RPCResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RPCResponse& from);
  void MergeFrom(const RPCResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RPCResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .anakin.rpc.IO outputs = 2;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 2;
  const ::anakin::rpc::IO& outputs(int index) const;
  ::anakin::rpc::IO* mutable_outputs(int index);
  ::anakin::rpc::IO* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >&
      outputs() const;

  // bytes model = 1;
  void clear_model();
  static const int kModelFieldNumber = 1;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const void* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // .anakin.rpc.ExecutionInfo info = 3;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  const ::anakin::rpc::ExecutionInfo& info() const;
  ::anakin::rpc::ExecutionInfo* mutable_info();
  ::anakin::rpc::ExecutionInfo* release_info();
  void set_allocated_info(::anakin::rpc::ExecutionInfo* info);

  // int64 request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:anakin.rpc.RPCResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO > outputs_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::anakin::rpc::ExecutionInfo* info_;
  ::google::protobuf::int64 request_id_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// ===================================================================

class RPCService_Stub;

class RPCService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RPCService() {};
 public:
  virtual ~RPCService();

  typedef RPCService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void evaluate(::google::protobuf::RpcController* controller,
                       const ::anakin::rpc::RPCRequest* request,
                       ::anakin::rpc::RPCResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RPCService);
};

class RPCService_Stub : public RPCService {
 public:
  RPCService_Stub(::google::protobuf::RpcChannel* channel);
  RPCService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RPCService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RPCService ------------------------------------------

  void evaluate(::google::protobuf::RpcController* controller,
                       const ::anakin::rpc::RPCRequest* request,
                       ::anakin::rpc::RPCResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RPCService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// repeated int32 shape = 1;
inline int Data::shape_size() const {
  return shape_.size();
}
inline void Data::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 Data::shape(int index) const {
  // @@protoc_insertion_point(field_get:anakin.rpc.Data.shape)
  return shape_.Get(index);
}
inline void Data::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:anakin.rpc.Data.shape)
}
inline void Data::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:anakin.rpc.Data.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Data::shape() const {
  // @@protoc_insertion_point(field_list:anakin.rpc.Data.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Data::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:anakin.rpc.Data.shape)
  return &shape_;
}

// repeated float data = 2;
inline int Data::data_size() const {
  return data_.size();
}
inline void Data::clear_data() {
  data_.Clear();
}
inline float Data::data(int index) const {
  // @@protoc_insertion_point(field_get:anakin.rpc.Data.data)
  return data_.Get(index);
}
inline void Data::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:anakin.rpc.Data.data)
}
inline void Data::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:anakin.rpc.Data.data)
}
inline const ::google::protobuf::RepeatedField< float >&
Data::data() const {
  // @@protoc_insertion_point(field_list:anakin.rpc.Data.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
Data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:anakin.rpc.Data.data)
  return &data_;
}

// -------------------------------------------------------------------

// IO

// .anakin.rpc.Data tensor = 1;
inline bool IO::has_tensor() const {
  return this != internal_default_instance() && tensor_ != NULL;
}
inline void IO::clear_tensor() {
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
}
inline const ::anakin::rpc::Data& IO::tensor() const {
  const ::anakin::rpc::Data* p = tensor_;
  // @@protoc_insertion_point(field_get:anakin.rpc.IO.tensor)
  return p != NULL ? *p : *reinterpret_cast<const ::anakin::rpc::Data*>(
      &::anakin::rpc::_Data_default_instance_);
}
inline ::anakin::rpc::Data* IO::mutable_tensor() {
  
  if (tensor_ == NULL) {
    tensor_ = new ::anakin::rpc::Data;
  }
  // @@protoc_insertion_point(field_mutable:anakin.rpc.IO.tensor)
  return tensor_;
}
inline ::anakin::rpc::Data* IO::release_tensor() {
  // @@protoc_insertion_point(field_release:anakin.rpc.IO.tensor)
  
  ::anakin::rpc::Data* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
inline void IO::set_allocated_tensor(::anakin::rpc::Data* tensor) {
  delete tensor_;
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.IO.tensor)
}

// -------------------------------------------------------------------

// RPCRequest

// bytes model = 1;
inline void RPCRequest::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCRequest::model() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCRequest.model)
  return model_.GetNoArena();
}
inline void RPCRequest::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anakin.rpc.RPCRequest.model)
}
#if LANG_CXX11
inline void RPCRequest::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:anakin.rpc.RPCRequest.model)
}
#endif
inline void RPCRequest::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anakin.rpc.RPCRequest.model)
}
inline void RPCRequest::set_model(const void* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anakin.rpc.RPCRequest.model)
}
inline ::std::string* RPCRequest::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCRequest.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCRequest::release_model() {
  // @@protoc_insertion_point(field_release:anakin.rpc.RPCRequest.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCRequest::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.RPCRequest.model)
}

// repeated .anakin.rpc.IO inputs = 2;
inline int RPCRequest::inputs_size() const {
  return inputs_.size();
}
inline void RPCRequest::clear_inputs() {
  inputs_.Clear();
}
inline const ::anakin::rpc::IO& RPCRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCRequest.inputs)
  return inputs_.Get(index);
}
inline ::anakin::rpc::IO* RPCRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCRequest.inputs)
  return inputs_.Mutable(index);
}
inline ::anakin::rpc::IO* RPCRequest::add_inputs() {
  // @@protoc_insertion_point(field_add:anakin.rpc.RPCRequest.inputs)
  return inputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >*
RPCRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:anakin.rpc.RPCRequest.inputs)
  return &inputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >&
RPCRequest::inputs() const {
  // @@protoc_insertion_point(field_list:anakin.rpc.RPCRequest.inputs)
  return inputs_;
}

// int64 request_id = 3;
inline void RPCRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPCRequest::request_id() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCRequest.request_id)
  return request_id_;
}
inline void RPCRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.RPCRequest.request_id)
}

// -------------------------------------------------------------------

// DeviceStatus

// int32 id = 1;
inline void DeviceStatus::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 DeviceStatus::id() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.id)
  return id_;
}
inline void DeviceStatus::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.id)
}

// bytes name = 2;
inline void DeviceStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceStatus::name() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.name)
  return name_.GetNoArena();
}
inline void DeviceStatus::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.name)
}
#if LANG_CXX11
inline void DeviceStatus::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:anakin.rpc.DeviceStatus.name)
}
#endif
inline void DeviceStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anakin.rpc.DeviceStatus.name)
}
inline void DeviceStatus::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anakin.rpc.DeviceStatus.name)
}
inline ::std::string* DeviceStatus::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:anakin.rpc.DeviceStatus.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceStatus::release_name() {
  // @@protoc_insertion_point(field_release:anakin.rpc.DeviceStatus.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceStatus::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.DeviceStatus.name)
}

// int32 temp = 3;
inline void DeviceStatus::clear_temp() {
  temp_ = 0;
}
inline ::google::protobuf::int32 DeviceStatus::temp() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.temp)
  return temp_;
}
inline void DeviceStatus::set_temp(::google::protobuf::int32 value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.temp)
}

// int32 mem_free = 4;
inline void DeviceStatus::clear_mem_free() {
  mem_free_ = 0;
}
inline ::google::protobuf::int32 DeviceStatus::mem_free() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.mem_free)
  return mem_free_;
}
inline void DeviceStatus::set_mem_free(::google::protobuf::int32 value) {
  
  mem_free_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.mem_free)
}

// int32 mem_used = 5;
inline void DeviceStatus::clear_mem_used() {
  mem_used_ = 0;
}
inline ::google::protobuf::int32 DeviceStatus::mem_used() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.mem_used)
  return mem_used_;
}
inline void DeviceStatus::set_mem_used(::google::protobuf::int32 value) {
  
  mem_used_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.mem_used)
}

// -------------------------------------------------------------------

// ExecutionInfo

// bytes msg = 1;
inline void ExecutionInfo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionInfo::msg() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.ExecutionInfo.msg)
  return msg_.GetNoArena();
}
inline void ExecutionInfo::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anakin.rpc.ExecutionInfo.msg)
}
#if LANG_CXX11
inline void ExecutionInfo::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:anakin.rpc.ExecutionInfo.msg)
}
#endif
inline void ExecutionInfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anakin.rpc.ExecutionInfo.msg)
}
inline void ExecutionInfo::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anakin.rpc.ExecutionInfo.msg)
}
inline ::std::string* ExecutionInfo::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:anakin.rpc.ExecutionInfo.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionInfo::release_msg() {
  // @@protoc_insertion_point(field_release:anakin.rpc.ExecutionInfo.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionInfo::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.ExecutionInfo.msg)
}

// int32 duration_in_nano_seconds = 2;
inline void ExecutionInfo::clear_duration_in_nano_seconds() {
  duration_in_nano_seconds_ = 0;
}
inline ::google::protobuf::int32 ExecutionInfo::duration_in_nano_seconds() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.ExecutionInfo.duration_in_nano_seconds)
  return duration_in_nano_seconds_;
}
inline void ExecutionInfo::set_duration_in_nano_seconds(::google::protobuf::int32 value) {
  
  duration_in_nano_seconds_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.ExecutionInfo.duration_in_nano_seconds)
}

// .anakin.rpc.DeviceStatus device_status = 3;
inline bool ExecutionInfo::has_device_status() const {
  return this != internal_default_instance() && device_status_ != NULL;
}
inline void ExecutionInfo::clear_device_status() {
  if (GetArenaNoVirtual() == NULL && device_status_ != NULL) delete device_status_;
  device_status_ = NULL;
}
inline const ::anakin::rpc::DeviceStatus& ExecutionInfo::device_status() const {
  const ::anakin::rpc::DeviceStatus* p = device_status_;
  // @@protoc_insertion_point(field_get:anakin.rpc.ExecutionInfo.device_status)
  return p != NULL ? *p : *reinterpret_cast<const ::anakin::rpc::DeviceStatus*>(
      &::anakin::rpc::_DeviceStatus_default_instance_);
}
inline ::anakin::rpc::DeviceStatus* ExecutionInfo::mutable_device_status() {
  
  if (device_status_ == NULL) {
    device_status_ = new ::anakin::rpc::DeviceStatus;
  }
  // @@protoc_insertion_point(field_mutable:anakin.rpc.ExecutionInfo.device_status)
  return device_status_;
}
inline ::anakin::rpc::DeviceStatus* ExecutionInfo::release_device_status() {
  // @@protoc_insertion_point(field_release:anakin.rpc.ExecutionInfo.device_status)
  
  ::anakin::rpc::DeviceStatus* temp = device_status_;
  device_status_ = NULL;
  return temp;
}
inline void ExecutionInfo::set_allocated_device_status(::anakin::rpc::DeviceStatus* device_status) {
  delete device_status_;
  device_status_ = device_status;
  if (device_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.ExecutionInfo.device_status)
}

// -------------------------------------------------------------------

// RPCResponse

// bytes model = 1;
inline void RPCResponse::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RPCResponse::model() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCResponse.model)
  return model_.GetNoArena();
}
inline void RPCResponse::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anakin.rpc.RPCResponse.model)
}
#if LANG_CXX11
inline void RPCResponse::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:anakin.rpc.RPCResponse.model)
}
#endif
inline void RPCResponse::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anakin.rpc.RPCResponse.model)
}
inline void RPCResponse::set_model(const void* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anakin.rpc.RPCResponse.model)
}
inline ::std::string* RPCResponse::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCResponse.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RPCResponse::release_model() {
  // @@protoc_insertion_point(field_release:anakin.rpc.RPCResponse.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RPCResponse::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.RPCResponse.model)
}

// repeated .anakin.rpc.IO outputs = 2;
inline int RPCResponse::outputs_size() const {
  return outputs_.size();
}
inline void RPCResponse::clear_outputs() {
  outputs_.Clear();
}
inline const ::anakin::rpc::IO& RPCResponse::outputs(int index) const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCResponse.outputs)
  return outputs_.Get(index);
}
inline ::anakin::rpc::IO* RPCResponse::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCResponse.outputs)
  return outputs_.Mutable(index);
}
inline ::anakin::rpc::IO* RPCResponse::add_outputs() {
  // @@protoc_insertion_point(field_add:anakin.rpc.RPCResponse.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >*
RPCResponse::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:anakin.rpc.RPCResponse.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >&
RPCResponse::outputs() const {
  // @@protoc_insertion_point(field_list:anakin.rpc.RPCResponse.outputs)
  return outputs_;
}

// .anakin.rpc.ExecutionInfo info = 3;
inline bool RPCResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void RPCResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::anakin::rpc::ExecutionInfo& RPCResponse::info() const {
  const ::anakin::rpc::ExecutionInfo* p = info_;
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::anakin::rpc::ExecutionInfo*>(
      &::anakin::rpc::_ExecutionInfo_default_instance_);
}
inline ::anakin::rpc::ExecutionInfo* RPCResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::anakin::rpc::ExecutionInfo;
  }
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCResponse.info)
  return info_;
}
inline ::anakin::rpc::ExecutionInfo* RPCResponse::release_info() {
  // @@protoc_insertion_point(field_release:anakin.rpc.RPCResponse.info)
  
  ::anakin::rpc::ExecutionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void RPCResponse::set_allocated_info(::anakin::rpc::ExecutionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.RPCResponse.info)
}

// int64 request_id = 4;
inline void RPCResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RPCResponse::request_id() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCResponse.request_id)
  return request_id_;
}
inline void RPCResponse::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.RPCResponse.request_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace rpc
}  // namespace anakin

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2eproto__INCLUDED
