// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace anakin {
namespace rpc {
class DataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Data>
     _instance;
} _Data_default_instance_;
class IODefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IO>
     _instance;
} _IO_default_instance_;
class RPCRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RPCRequest>
     _instance;
} _RPCRequest_default_instance_;
class DeviceStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeviceStatus>
     _instance;
} _DeviceStatus_default_instance_;
class ExecutionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ExecutionInfo>
     _instance;
} _ExecutionInfo_default_instance_;
class RPCResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RPCResponse>
     _instance;
} _RPCResponse_default_instance_;

namespace protobuf_service_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IO, tensor_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCRequest, request_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatus, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatus, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatus, temp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatus, mem_free_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatus, mem_used_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionInfo, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionInfo, duration_in_nano_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionInfo, device_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, outputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCResponse, request_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Data)},
  { 7, -1, sizeof(IO)},
  { 13, -1, sizeof(RPCRequest)},
  { 21, -1, sizeof(DeviceStatus)},
  { 31, -1, sizeof(ExecutionInfo)},
  { 39, -1, sizeof(RPCResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RPCRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeviceStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExecutionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RPCResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Data_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Data_default_instance_);_IO_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IO_default_instance_);_RPCRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RPCRequest_default_instance_);_DeviceStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeviceStatus_default_instance_);_ExecutionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ExecutionInfo_default_instance_);_RPCResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RPCResponse_default_instance_);_IO_default_instance_._instance.get_mutable()->tensor_ = const_cast< ::anakin::rpc::Data*>(
      ::anakin::rpc::Data::internal_default_instance());
  _ExecutionInfo_default_instance_._instance.get_mutable()->device_status_ = const_cast< ::anakin::rpc::DeviceStatus*>(
      ::anakin::rpc::DeviceStatus::internal_default_instance());
  _RPCResponse_default_instance_._instance.get_mutable()->info_ = const_cast< ::anakin::rpc::ExecutionInfo*>(
      ::anakin::rpc::ExecutionInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rservice.proto\022\nanakin.rpc\"#\n\004Data\022\r\n\005s"
      "hape\030\001 \003(\005\022\014\n\004data\030\002 \003(\002\"&\n\002IO\022 \n\006tensor"
      "\030\001 \001(\0132\020.anakin.rpc.Data\"O\n\nRPCRequest\022\r"
      "\n\005model\030\001 \001(\014\022\036\n\006inputs\030\002 \003(\0132\016.anakin.r"
      "pc.IO\022\022\n\nrequest_id\030\003 \001(\003\"Z\n\014DeviceStatu"
      "s\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\014\022\014\n\004temp\030\003 \001("
      "\005\022\020\n\010mem_free\030\004 \001(\005\022\020\n\010mem_used\030\005 \001(\005\"o\n"
      "\rExecutionInfo\022\013\n\003msg\030\001 \001(\014\022 \n\030duration_"
      "in_nano_seconds\030\002 \001(\005\022/\n\rdevice_status\030\003"
      " \001(\0132\030.anakin.rpc.DeviceStatus\"z\n\013RPCRes"
      "ponse\022\r\n\005model\030\001 \001(\014\022\037\n\007outputs\030\002 \003(\0132\016."
      "anakin.rpc.IO\022\'\n\004info\030\003 \001(\0132\031.anakin.rpc"
      ".ExecutionInfo\022\022\n\nrequest_id\030\004 \001(\0032I\n\nRP"
      "CService\022;\n\010evaluate\022\026.anakin.rpc.RPCReq"
      "uest\032\027.anakin.rpc.RPCResponseB\003\200\001\001b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 602);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_service_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kShapeFieldNumber;
const int Data::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:anakin.rpc.Data)
}
Data::Data(const Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shape_(from.shape_),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:anakin.rpc.Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:anakin.rpc.Data)
  SharedDtor();
}

void Data::SharedDtor() {
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Data& Data::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:anakin.rpc.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  data_.Clear();
  _internal_metadata_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:anakin.rpc.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anakin.rpc.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anakin.rpc.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anakin.rpc.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  if (this->shape_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _shape_cached_byte_size_));
  }
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->shape(i), output);
  }

  // repeated float data = 2;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:anakin.rpc.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:anakin.rpc.Data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 shape = 1;
  if (this->shape_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _shape_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->shape_, target);
  }

  // repeated float data = 2;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anakin.rpc.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anakin.rpc.Data)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 shape = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _shape_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:anakin.rpc.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:anakin.rpc.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:anakin.rpc.Data)
    MergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:anakin.rpc.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  data_.MergeFrom(from.data_);
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:anakin.rpc.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anakin.rpc.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  using std::swap;
  shape_.InternalSwap(&other->shape_);
  data_.InternalSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// repeated int32 shape = 1;
int Data::shape_size() const {
  return shape_.size();
}
void Data::clear_shape() {
  shape_.Clear();
}
::google::protobuf::int32 Data::shape(int index) const {
  // @@protoc_insertion_point(field_get:anakin.rpc.Data.shape)
  return shape_.Get(index);
}
void Data::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:anakin.rpc.Data.shape)
}
void Data::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:anakin.rpc.Data.shape)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Data::shape() const {
  // @@protoc_insertion_point(field_list:anakin.rpc.Data.shape)
  return shape_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Data::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:anakin.rpc.Data.shape)
  return &shape_;
}

// repeated float data = 2;
int Data::data_size() const {
  return data_.size();
}
void Data::clear_data() {
  data_.Clear();
}
float Data::data(int index) const {
  // @@protoc_insertion_point(field_get:anakin.rpc.Data.data)
  return data_.Get(index);
}
void Data::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:anakin.rpc.Data.data)
}
void Data::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:anakin.rpc.Data.data)
}
const ::google::protobuf::RepeatedField< float >&
Data::data() const {
  // @@protoc_insertion_point(field_list:anakin.rpc.Data.data)
  return data_;
}
::google::protobuf::RepeatedField< float >*
Data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:anakin.rpc.Data.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IO::kTensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IO::IO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:anakin.rpc.IO)
}
IO::IO(const IO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor()) {
    tensor_ = new ::anakin::rpc::Data(*from.tensor_);
  } else {
    tensor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:anakin.rpc.IO)
}

void IO::SharedCtor() {
  tensor_ = NULL;
  _cached_size_ = 0;
}

IO::~IO() {
  // @@protoc_insertion_point(destructor:anakin.rpc.IO)
  SharedDtor();
}

void IO::SharedDtor() {
  if (this != internal_default_instance()) delete tensor_;
}

void IO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IO::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IO& IO::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

IO* IO::New(::google::protobuf::Arena* arena) const {
  IO* n = new IO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IO::Clear() {
// @@protoc_insertion_point(message_clear_start:anakin.rpc.IO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) {
    delete tensor_;
  }
  tensor_ = NULL;
  _internal_metadata_.Clear();
}

bool IO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:anakin.rpc.IO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .anakin.rpc.Data tensor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anakin.rpc.IO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anakin.rpc.IO)
  return false;
#undef DO_
}

void IO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anakin.rpc.IO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .anakin.rpc.Data tensor = 1;
  if (this->has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tensor_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:anakin.rpc.IO)
}

::google::protobuf::uint8* IO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:anakin.rpc.IO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .anakin.rpc.Data tensor = 1;
  if (this->has_tensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->tensor_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anakin.rpc.IO)
  return target;
}

size_t IO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anakin.rpc.IO)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .anakin.rpc.Data tensor = 1;
  if (this->has_tensor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tensor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:anakin.rpc.IO)
  GOOGLE_DCHECK_NE(&from, this);
  const IO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:anakin.rpc.IO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:anakin.rpc.IO)
    MergeFrom(*source);
  }
}

void IO::MergeFrom(const IO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:anakin.rpc.IO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tensor()) {
    mutable_tensor()->::anakin::rpc::Data::MergeFrom(from.tensor());
  }
}

void IO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:anakin.rpc.IO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IO::CopyFrom(const IO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anakin.rpc.IO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IO::IsInitialized() const {
  return true;
}

void IO::Swap(IO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IO::InternalSwap(IO* other) {
  using std::swap;
  swap(tensor_, other->tensor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IO::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IO

// .anakin.rpc.Data tensor = 1;
bool IO::has_tensor() const {
  return this != internal_default_instance() && tensor_ != NULL;
}
void IO::clear_tensor() {
  if (GetArenaNoVirtual() == NULL && tensor_ != NULL) delete tensor_;
  tensor_ = NULL;
}
const ::anakin::rpc::Data& IO::tensor() const {
  const ::anakin::rpc::Data* p = tensor_;
  // @@protoc_insertion_point(field_get:anakin.rpc.IO.tensor)
  return p != NULL ? *p : *reinterpret_cast<const ::anakin::rpc::Data*>(
      &::anakin::rpc::_Data_default_instance_);
}
::anakin::rpc::Data* IO::mutable_tensor() {
  
  if (tensor_ == NULL) {
    tensor_ = new ::anakin::rpc::Data;
  }
  // @@protoc_insertion_point(field_mutable:anakin.rpc.IO.tensor)
  return tensor_;
}
::anakin::rpc::Data* IO::release_tensor() {
  // @@protoc_insertion_point(field_release:anakin.rpc.IO.tensor)
  
  ::anakin::rpc::Data* temp = tensor_;
  tensor_ = NULL;
  return temp;
}
void IO::set_allocated_tensor(::anakin::rpc::Data* tensor) {
  delete tensor_;
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.IO.tensor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCRequest::kModelFieldNumber;
const int RPCRequest::kInputsFieldNumber;
const int RPCRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCRequest::RPCRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:anakin.rpc.RPCRequest)
}
RPCRequest::RPCRequest(const RPCRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:anakin.rpc.RPCRequest)
}

void RPCRequest::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

RPCRequest::~RPCRequest() {
  // @@protoc_insertion_point(destructor:anakin.rpc.RPCRequest)
  SharedDtor();
}

void RPCRequest::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RPCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCRequest::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCRequest& RPCRequest::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

RPCRequest* RPCRequest::New(::google::protobuf::Arena* arena) const {
  RPCRequest* n = new RPCRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:anakin.rpc.RPCRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool RPCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:anakin.rpc.RPCRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .anakin.rpc.IO inputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anakin.rpc.RPCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anakin.rpc.RPCRequest)
  return false;
#undef DO_
}

void RPCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anakin.rpc.RPCRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->model(), output);
  }

  // repeated .anakin.rpc.IO inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->inputs(static_cast<int>(i)), output);
  }

  // int64 request_id = 3;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->request_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:anakin.rpc.RPCRequest)
}

::google::protobuf::uint8* RPCRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:anakin.rpc.RPCRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes model = 1;
  if (this->model().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->model(), target);
  }

  // repeated .anakin.rpc.IO inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->inputs(static_cast<int>(i)), deterministic, target);
  }

  // int64 request_id = 3;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->request_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anakin.rpc.RPCRequest)
  return target;
}

size_t RPCRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anakin.rpc.RPCRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .anakin.rpc.IO inputs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs(static_cast<int>(i)));
    }
  }

  // bytes model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->model());
  }

  // int64 request_id = 3;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:anakin.rpc.RPCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:anakin.rpc.RPCRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:anakin.rpc.RPCRequest)
    MergeFrom(*source);
  }
}

void RPCRequest::MergeFrom(const RPCRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:anakin.rpc.RPCRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void RPCRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:anakin.rpc.RPCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCRequest::CopyFrom(const RPCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anakin.rpc.RPCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCRequest::IsInitialized() const {
  return true;
}

void RPCRequest::Swap(RPCRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCRequest::InternalSwap(RPCRequest* other) {
  using std::swap;
  inputs_.InternalSwap(&other->inputs_);
  model_.Swap(&other->model_);
  swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCRequest::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCRequest

// bytes model = 1;
void RPCRequest::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RPCRequest::model() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCRequest.model)
  return model_.GetNoArena();
}
void RPCRequest::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anakin.rpc.RPCRequest.model)
}
#if LANG_CXX11
void RPCRequest::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:anakin.rpc.RPCRequest.model)
}
#endif
void RPCRequest::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anakin.rpc.RPCRequest.model)
}
void RPCRequest::set_model(const void* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anakin.rpc.RPCRequest.model)
}
::std::string* RPCRequest::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCRequest.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RPCRequest::release_model() {
  // @@protoc_insertion_point(field_release:anakin.rpc.RPCRequest.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RPCRequest::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.RPCRequest.model)
}

// repeated .anakin.rpc.IO inputs = 2;
int RPCRequest::inputs_size() const {
  return inputs_.size();
}
void RPCRequest::clear_inputs() {
  inputs_.Clear();
}
const ::anakin::rpc::IO& RPCRequest::inputs(int index) const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCRequest.inputs)
  return inputs_.Get(index);
}
::anakin::rpc::IO* RPCRequest::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCRequest.inputs)
  return inputs_.Mutable(index);
}
::anakin::rpc::IO* RPCRequest::add_inputs() {
  // @@protoc_insertion_point(field_add:anakin.rpc.RPCRequest.inputs)
  return inputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >*
RPCRequest::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:anakin.rpc.RPCRequest.inputs)
  return &inputs_;
}
const ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >&
RPCRequest::inputs() const {
  // @@protoc_insertion_point(field_list:anakin.rpc.RPCRequest.inputs)
  return inputs_;
}

// int64 request_id = 3;
void RPCRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RPCRequest::request_id() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCRequest.request_id)
  return request_id_;
}
void RPCRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.RPCRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStatus::kIdFieldNumber;
const int DeviceStatus::kNameFieldNumber;
const int DeviceStatus::kTempFieldNumber;
const int DeviceStatus::kMemFreeFieldNumber;
const int DeviceStatus::kMemUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStatus::DeviceStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:anakin.rpc.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_used_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mem_used_));
  // @@protoc_insertion_point(copy_constructor:anakin.rpc.DeviceStatus)
}

void DeviceStatus::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_used_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mem_used_));
  _cached_size_ = 0;
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:anakin.rpc.DeviceStatus)
  SharedDtor();
}

void DeviceStatus::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceStatus::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeviceStatus& DeviceStatus::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeviceStatus* DeviceStatus::New(::google::protobuf::Arena* arena) const {
  DeviceStatus* n = new DeviceStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:anakin.rpc.DeviceStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_used_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mem_used_));
  _internal_metadata_.Clear();
}

bool DeviceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:anakin.rpc.DeviceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 temp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mem_free = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mem_used = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anakin.rpc.DeviceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anakin.rpc.DeviceStatus)
  return false;
#undef DO_
}

void DeviceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anakin.rpc.DeviceStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // int32 temp = 3;
  if (this->temp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->temp(), output);
  }

  // int32 mem_free = 4;
  if (this->mem_free() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mem_free(), output);
  }

  // int32 mem_used = 5;
  if (this->mem_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mem_used(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:anakin.rpc.DeviceStatus)
}

::google::protobuf::uint8* DeviceStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:anakin.rpc.DeviceStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // int32 temp = 3;
  if (this->temp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->temp(), target);
  }

  // int32 mem_free = 4;
  if (this->mem_free() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mem_free(), target);
  }

  // int32 mem_used = 5;
  if (this->mem_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mem_used(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anakin.rpc.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anakin.rpc.DeviceStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 temp = 3;
  if (this->temp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->temp());
  }

  // int32 mem_free = 4;
  if (this->mem_free() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mem_free());
  }

  // int32 mem_used = 5;
  if (this->mem_used() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mem_used());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:anakin.rpc.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:anakin.rpc.DeviceStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:anakin.rpc.DeviceStatus)
    MergeFrom(*source);
  }
}

void DeviceStatus::MergeFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:anakin.rpc.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.temp() != 0) {
    set_temp(from.temp());
  }
  if (from.mem_free() != 0) {
    set_mem_free(from.mem_free());
  }
  if (from.mem_used() != 0) {
    set_mem_used(from.mem_used());
  }
}

void DeviceStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:anakin.rpc.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anakin.rpc.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::Swap(DeviceStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(temp_, other->temp_);
  swap(mem_free_, other->mem_free_);
  swap(mem_used_, other->mem_used_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceStatus::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStatus

// int32 id = 1;
void DeviceStatus::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 DeviceStatus::id() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.id)
  return id_;
}
void DeviceStatus::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.id)
}

// bytes name = 2;
void DeviceStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceStatus::name() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.name)
  return name_.GetNoArena();
}
void DeviceStatus::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.name)
}
#if LANG_CXX11
void DeviceStatus::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:anakin.rpc.DeviceStatus.name)
}
#endif
void DeviceStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anakin.rpc.DeviceStatus.name)
}
void DeviceStatus::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anakin.rpc.DeviceStatus.name)
}
::std::string* DeviceStatus::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:anakin.rpc.DeviceStatus.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceStatus::release_name() {
  // @@protoc_insertion_point(field_release:anakin.rpc.DeviceStatus.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceStatus::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.DeviceStatus.name)
}

// int32 temp = 3;
void DeviceStatus::clear_temp() {
  temp_ = 0;
}
::google::protobuf::int32 DeviceStatus::temp() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.temp)
  return temp_;
}
void DeviceStatus::set_temp(::google::protobuf::int32 value) {
  
  temp_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.temp)
}

// int32 mem_free = 4;
void DeviceStatus::clear_mem_free() {
  mem_free_ = 0;
}
::google::protobuf::int32 DeviceStatus::mem_free() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.mem_free)
  return mem_free_;
}
void DeviceStatus::set_mem_free(::google::protobuf::int32 value) {
  
  mem_free_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.mem_free)
}

// int32 mem_used = 5;
void DeviceStatus::clear_mem_used() {
  mem_used_ = 0;
}
::google::protobuf::int32 DeviceStatus::mem_used() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.DeviceStatus.mem_used)
  return mem_used_;
}
void DeviceStatus::set_mem_used(::google::protobuf::int32 value) {
  
  mem_used_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.DeviceStatus.mem_used)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionInfo::kMsgFieldNumber;
const int ExecutionInfo::kDurationInNanoSecondsFieldNumber;
const int ExecutionInfo::kDeviceStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionInfo::ExecutionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:anakin.rpc.ExecutionInfo)
}
ExecutionInfo::ExecutionInfo(const ExecutionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_device_status()) {
    device_status_ = new ::anakin::rpc::DeviceStatus(*from.device_status_);
  } else {
    device_status_ = NULL;
  }
  duration_in_nano_seconds_ = from.duration_in_nano_seconds_;
  // @@protoc_insertion_point(copy_constructor:anakin.rpc.ExecutionInfo)
}

void ExecutionInfo::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_in_nano_seconds_) -
      reinterpret_cast<char*>(&device_status_)) + sizeof(duration_in_nano_seconds_));
  _cached_size_ = 0;
}

ExecutionInfo::~ExecutionInfo() {
  // @@protoc_insertion_point(destructor:anakin.rpc.ExecutionInfo)
  SharedDtor();
}

void ExecutionInfo::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete device_status_;
}

void ExecutionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionInfo::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecutionInfo& ExecutionInfo::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExecutionInfo* ExecutionInfo::New(::google::protobuf::Arena* arena) const {
  ExecutionInfo* n = new ExecutionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecutionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:anakin.rpc.ExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && device_status_ != NULL) {
    delete device_status_;
  }
  device_status_ = NULL;
  duration_in_nano_seconds_ = 0;
  _internal_metadata_.Clear();
}

bool ExecutionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:anakin.rpc.ExecutionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 duration_in_nano_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_in_nano_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .anakin.rpc.DeviceStatus device_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anakin.rpc.ExecutionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anakin.rpc.ExecutionInfo)
  return false;
#undef DO_
}

void ExecutionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anakin.rpc.ExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->msg(), output);
  }

  // int32 duration_in_nano_seconds = 2;
  if (this->duration_in_nano_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duration_in_nano_seconds(), output);
  }

  // .anakin.rpc.DeviceStatus device_status = 3;
  if (this->has_device_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->device_status_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:anakin.rpc.ExecutionInfo)
}

::google::protobuf::uint8* ExecutionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:anakin.rpc.ExecutionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->msg(), target);
  }

  // int32 duration_in_nano_seconds = 2;
  if (this->duration_in_nano_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duration_in_nano_seconds(), target);
  }

  // .anakin.rpc.DeviceStatus device_status = 3;
  if (this->has_device_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->device_status_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anakin.rpc.ExecutionInfo)
  return target;
}

size_t ExecutionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anakin.rpc.ExecutionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // .anakin.rpc.DeviceStatus device_status = 3;
  if (this->has_device_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_status_);
  }

  // int32 duration_in_nano_seconds = 2;
  if (this->duration_in_nano_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->duration_in_nano_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:anakin.rpc.ExecutionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecutionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:anakin.rpc.ExecutionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:anakin.rpc.ExecutionInfo)
    MergeFrom(*source);
  }
}

void ExecutionInfo::MergeFrom(const ExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:anakin.rpc.ExecutionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_device_status()) {
    mutable_device_status()->::anakin::rpc::DeviceStatus::MergeFrom(from.device_status());
  }
  if (from.duration_in_nano_seconds() != 0) {
    set_duration_in_nano_seconds(from.duration_in_nano_seconds());
  }
}

void ExecutionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:anakin.rpc.ExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionInfo::CopyFrom(const ExecutionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anakin.rpc.ExecutionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionInfo::IsInitialized() const {
  return true;
}

void ExecutionInfo::Swap(ExecutionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionInfo::InternalSwap(ExecutionInfo* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(device_status_, other->device_status_);
  swap(duration_in_nano_seconds_, other->duration_in_nano_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecutionInfo::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecutionInfo

// bytes msg = 1;
void ExecutionInfo::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExecutionInfo::msg() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.ExecutionInfo.msg)
  return msg_.GetNoArena();
}
void ExecutionInfo::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anakin.rpc.ExecutionInfo.msg)
}
#if LANG_CXX11
void ExecutionInfo::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:anakin.rpc.ExecutionInfo.msg)
}
#endif
void ExecutionInfo::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anakin.rpc.ExecutionInfo.msg)
}
void ExecutionInfo::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anakin.rpc.ExecutionInfo.msg)
}
::std::string* ExecutionInfo::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:anakin.rpc.ExecutionInfo.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExecutionInfo::release_msg() {
  // @@protoc_insertion_point(field_release:anakin.rpc.ExecutionInfo.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExecutionInfo::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.ExecutionInfo.msg)
}

// int32 duration_in_nano_seconds = 2;
void ExecutionInfo::clear_duration_in_nano_seconds() {
  duration_in_nano_seconds_ = 0;
}
::google::protobuf::int32 ExecutionInfo::duration_in_nano_seconds() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.ExecutionInfo.duration_in_nano_seconds)
  return duration_in_nano_seconds_;
}
void ExecutionInfo::set_duration_in_nano_seconds(::google::protobuf::int32 value) {
  
  duration_in_nano_seconds_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.ExecutionInfo.duration_in_nano_seconds)
}

// .anakin.rpc.DeviceStatus device_status = 3;
bool ExecutionInfo::has_device_status() const {
  return this != internal_default_instance() && device_status_ != NULL;
}
void ExecutionInfo::clear_device_status() {
  if (GetArenaNoVirtual() == NULL && device_status_ != NULL) delete device_status_;
  device_status_ = NULL;
}
const ::anakin::rpc::DeviceStatus& ExecutionInfo::device_status() const {
  const ::anakin::rpc::DeviceStatus* p = device_status_;
  // @@protoc_insertion_point(field_get:anakin.rpc.ExecutionInfo.device_status)
  return p != NULL ? *p : *reinterpret_cast<const ::anakin::rpc::DeviceStatus*>(
      &::anakin::rpc::_DeviceStatus_default_instance_);
}
::anakin::rpc::DeviceStatus* ExecutionInfo::mutable_device_status() {
  
  if (device_status_ == NULL) {
    device_status_ = new ::anakin::rpc::DeviceStatus;
  }
  // @@protoc_insertion_point(field_mutable:anakin.rpc.ExecutionInfo.device_status)
  return device_status_;
}
::anakin::rpc::DeviceStatus* ExecutionInfo::release_device_status() {
  // @@protoc_insertion_point(field_release:anakin.rpc.ExecutionInfo.device_status)
  
  ::anakin::rpc::DeviceStatus* temp = device_status_;
  device_status_ = NULL;
  return temp;
}
void ExecutionInfo::set_allocated_device_status(::anakin::rpc::DeviceStatus* device_status) {
  delete device_status_;
  device_status_ = device_status;
  if (device_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.ExecutionInfo.device_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RPCResponse::kModelFieldNumber;
const int RPCResponse::kOutputsFieldNumber;
const int RPCResponse::kInfoFieldNumber;
const int RPCResponse::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RPCResponse::RPCResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:anakin.rpc.RPCResponse)
}
RPCResponse::RPCResponse(const RPCResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      outputs_(from.outputs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.has_info()) {
    info_ = new ::anakin::rpc::ExecutionInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:anakin.rpc.RPCResponse)
}

void RPCResponse::SharedCtor() {
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&info_)) + sizeof(request_id_));
  _cached_size_ = 0;
}

RPCResponse::~RPCResponse() {
  // @@protoc_insertion_point(destructor:anakin.rpc.RPCResponse)
  SharedDtor();
}

void RPCResponse::SharedDtor() {
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void RPCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCResponse::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RPCResponse& RPCResponse::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

RPCResponse* RPCResponse::New(::google::protobuf::Arena* arena) const {
  RPCResponse* n = new RPCResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RPCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:anakin.rpc.RPCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  request_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool RPCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:anakin.rpc.RPCResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes model = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .anakin.rpc.IO outputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .anakin.rpc.ExecutionInfo info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 request_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:anakin.rpc.RPCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:anakin.rpc.RPCResponse)
  return false;
#undef DO_
}

void RPCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:anakin.rpc.RPCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes model = 1;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->model(), output);
  }

  // repeated .anakin.rpc.IO outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outputs(static_cast<int>(i)), output);
  }

  // .anakin.rpc.ExecutionInfo info = 3;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  // int64 request_id = 4;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->request_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:anakin.rpc.RPCResponse)
}

::google::protobuf::uint8* RPCResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:anakin.rpc.RPCResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes model = 1;
  if (this->model().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->model(), target);
  }

  // repeated .anakin.rpc.IO outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->outputs(static_cast<int>(i)), deterministic, target);
  }

  // .anakin.rpc.ExecutionInfo info = 3;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->info_, deterministic, target);
  }

  // int64 request_id = 4;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->request_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:anakin.rpc.RPCResponse)
  return target;
}

size_t RPCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:anakin.rpc.RPCResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .anakin.rpc.IO outputs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(static_cast<int>(i)));
    }
  }

  // bytes model = 1;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->model());
  }

  // .anakin.rpc.ExecutionInfo info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  // int64 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:anakin.rpc.RPCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RPCResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RPCResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:anakin.rpc.RPCResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:anakin.rpc.RPCResponse)
    MergeFrom(*source);
  }
}

void RPCResponse::MergeFrom(const RPCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:anakin.rpc.RPCResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.has_info()) {
    mutable_info()->::anakin::rpc::ExecutionInfo::MergeFrom(from.info());
  }
  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void RPCResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:anakin.rpc.RPCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCResponse::CopyFrom(const RPCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:anakin.rpc.RPCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCResponse::IsInitialized() const {
  return true;
}

void RPCResponse::Swap(RPCResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RPCResponse::InternalSwap(RPCResponse* other) {
  using std::swap;
  outputs_.InternalSwap(&other->outputs_);
  model_.Swap(&other->model_);
  swap(info_, other->info_);
  swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RPCResponse::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RPCResponse

// bytes model = 1;
void RPCResponse::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RPCResponse::model() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCResponse.model)
  return model_.GetNoArena();
}
void RPCResponse::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anakin.rpc.RPCResponse.model)
}
#if LANG_CXX11
void RPCResponse::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:anakin.rpc.RPCResponse.model)
}
#endif
void RPCResponse::set_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anakin.rpc.RPCResponse.model)
}
void RPCResponse::set_model(const void* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anakin.rpc.RPCResponse.model)
}
::std::string* RPCResponse::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCResponse.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RPCResponse::release_model() {
  // @@protoc_insertion_point(field_release:anakin.rpc.RPCResponse.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RPCResponse::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.RPCResponse.model)
}

// repeated .anakin.rpc.IO outputs = 2;
int RPCResponse::outputs_size() const {
  return outputs_.size();
}
void RPCResponse::clear_outputs() {
  outputs_.Clear();
}
const ::anakin::rpc::IO& RPCResponse::outputs(int index) const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCResponse.outputs)
  return outputs_.Get(index);
}
::anakin::rpc::IO* RPCResponse::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCResponse.outputs)
  return outputs_.Mutable(index);
}
::anakin::rpc::IO* RPCResponse::add_outputs() {
  // @@protoc_insertion_point(field_add:anakin.rpc.RPCResponse.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >*
RPCResponse::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:anakin.rpc.RPCResponse.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::anakin::rpc::IO >&
RPCResponse::outputs() const {
  // @@protoc_insertion_point(field_list:anakin.rpc.RPCResponse.outputs)
  return outputs_;
}

// .anakin.rpc.ExecutionInfo info = 3;
bool RPCResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void RPCResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::anakin::rpc::ExecutionInfo& RPCResponse::info() const {
  const ::anakin::rpc::ExecutionInfo* p = info_;
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCResponse.info)
  return p != NULL ? *p : *reinterpret_cast<const ::anakin::rpc::ExecutionInfo*>(
      &::anakin::rpc::_ExecutionInfo_default_instance_);
}
::anakin::rpc::ExecutionInfo* RPCResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::anakin::rpc::ExecutionInfo;
  }
  // @@protoc_insertion_point(field_mutable:anakin.rpc.RPCResponse.info)
  return info_;
}
::anakin::rpc::ExecutionInfo* RPCResponse::release_info() {
  // @@protoc_insertion_point(field_release:anakin.rpc.RPCResponse.info)
  
  ::anakin::rpc::ExecutionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void RPCResponse::set_allocated_info(::anakin::rpc::ExecutionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:anakin.rpc.RPCResponse.info)
}

// int64 request_id = 4;
void RPCResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RPCResponse::request_id() const {
  // @@protoc_insertion_point(field_get:anakin.rpc.RPCResponse.request_id)
  return request_id_;
}
void RPCResponse::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:anakin.rpc.RPCResponse.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

RPCService::~RPCService() {}

const ::google::protobuf::ServiceDescriptor* RPCService::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* RPCService::GetDescriptor() {
  return descriptor();
}

void RPCService::evaluate(::google::protobuf::RpcController* controller,
                         const ::anakin::rpc::RPCRequest*,
                         ::anakin::rpc::RPCResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method evaluate() not implemented.");
  done->Run();
}

void RPCService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_service_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      evaluate(controller,
             ::google::protobuf::down_cast<const ::anakin::rpc::RPCRequest*>(request),
             ::google::protobuf::down_cast< ::anakin::rpc::RPCResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& RPCService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::anakin::rpc::RPCRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& RPCService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::anakin::rpc::RPCResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

RPCService_Stub::RPCService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
RPCService_Stub::RPCService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
RPCService_Stub::~RPCService_Stub() {
  if (owns_channel_) delete channel_;
}

void RPCService_Stub::evaluate(::google::protobuf::RpcController* controller,
                              const ::anakin::rpc::RPCRequest* request,
                              ::anakin::rpc::RPCResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace anakin

// @@protoc_insertion_point(global_scope)
