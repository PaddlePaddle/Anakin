/* Copyright (c) 2018 Anakin Authors, Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

#ifndef _ANAKIN_CONFIGURATION_HEADER_GUARD_H_
#define _ANAKIN_CONFIGURATION_HEADER_GUARD_H_

#define ANAKIN_VERSION @VERSION@

// data float precision
#cmakedefine ANAKIN_TYPE_FP64
#cmakedefine ANAKIN_TYPE_FP32
#cmakedefine ANAKIN_TYPE_FP16
#cmakedefine ANAKIN_TYPE_INT8

// build options
#cmakedefine ENABLE_DEBUG

#cmakedefine USE_BOOST

#cmakedefine USE_CUBLAS

#cmakedefine USE_CURAND

#cmakedefine USE_CUDA

#cmakedefine USE_CUDNN

#cmakedefine USE_PYTHON

#cmakedefine USE_OPENCL 

#cmakedefine USE_OPENCV

#cmakedefine USE_MKL

#cmakedefine USE_OPENMP

#cmakedefine USE_LOGGER

#cmakedefine USE_GFLAGS


// plantform to use
#cmakedefine USE_GPU_PLACE

#cmakedefine USE_X86_PLACE

#cmakedefine USE_ARM_PLACE

#cmakedefine USE_BM_PLACE

#cmakedefine TARGET_ANDROID

#cmakedefine TARGET_IOS

#cmakedefine ENABLE_OP_TIMER

#cmakedefine NVIDIA_GPU

#cmakedefine AMD_GPU 

#cmakedefine ENABLE_STACKTRACES

#cmakedefine SUPPORT_PTHREADS

// build AOT lite for device
#cmakedefine BUILD_WITH_LITE


#if defined(ANDROID) || defined(__ANDROID__)
    #define PLATFORM_ANDROID
    #define IS_MOBILE_PLATFORM
#elif defined(__APPLE__)
    #define PLATFORM_POSIX
    #include "TargetConditionals.h"
    #if TARGET_IPHONE_SIMULATOR
        #define IS_MOBILE_PLATFORM
    #elif TARGET_OS_IPHONE
        #define IS_MOBILE_PLATFORM
    #endif
#elif defined(_WIN32)
    #define PLATFORM_WINDOWS
#elif defined(__arm__)
    #define PLATFORM_POSIX
    // Require an outside macro to tell us if we're building for Raspberry Pi.
    #if !defined(RASPBERRY_PI)
        #define IS_MOBILE_PLATFORM
    #endif  // !defined(RASPBERRY_PI)
#else
    // If no platform specified, use:
    #define PLATFORM_POSIX
#endif

// Look for both gcc/clang and Visual Studio macros indicating if compiling for an x86 device.
#if defined(__x86_64__) || defined(__amd64__) || defined(_M_IX86) || defined(_M_X64)
    #define PLATFORM_X86
#endif

#endif

